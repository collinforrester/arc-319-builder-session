Parameters:
    MyIPAddress:
      Type: String
      Default: 'Enter Current IP'
      MinLength: 1
      ConstraintDescription: 'IP address of current workstation to allow for ingress SSH access'
    MyEmailAddress:
      Type: String
      Default: 'Enter Valid Email address'
      MinLength: 1
      ConstraintDescription: 'Email address used for findings notification'
    TagCostCenterValue:
      Type: String
      Default: '900124-984'
      MinLength: 1
      ConstraintDescription: 'Required value.  Separate multiple values with comas.'
    TagWorkloadValue:
      Type: String
      Default: 'WordPress'
      MinLength: 1
      ConstraintDescription: 'Required value.  Separate multiple values with comas.'
    TagOwnerValue:
      Type: String
      Default: 'Brad Pitt'
      MinLength: 1
      ConstraintDescription: 'Required value.  Separate multiple values with comas.'
Resources:
    MFALambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action: sts:AssumeRole
          ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
          Policies:
            -
              PolicyName: "AllowSNSPublish"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action: "sns:Publish"
                    Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AWS::AccountId}-custom-remediation-topic"
            -
              PolicyName: "AllowIamAndConfigRead"
              PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                  - Effect: "Allow"
                    Action: ["config:ListDiscoveredResources", "iam:ListGroupsForUser", "iam:RemoveUserFromGroup"]
                    Resource: "*"
    IAMLambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        Policies:
          -
            PolicyName: "AllowSNSPublish"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action: "sns:Publish"
                  Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AWS::AccountId}-custom-remediation-topic"
          -
            PolicyName: "AllowIamAndConfigRead"
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                - Effect: "Allow"
                  Action: ["config:ListDiscoveredResources", "iam:GetPolicy", "iam:ListEntitiesForPolicy"]
                  Resource: "*"

    RequiredTagsLambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        Policies:
          -
            PolicyName: "AllowSNSPublish"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action: "sns:Publish"
                  Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AWS::AccountId}-custom-remediation-topic"
          -
            PolicyName: "AllowTagging"
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                - Effect: "Allow"
                  Action: ["s3:getBucketTagging", "s3:putBucketTagging", "ec2:createTags", "rds:addTagsToResource", "config:GetComplianceDetailsByConfigRule"]
                  Resource: "*"
    
    RequiredTagsRemediationSNSTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        TopicName: !Sub "${AWS::AccountId}-required-tags-remediation-topic"

    IAMRemediationSNSTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        TopicName: !Sub "${AWS::AccountId}-iam-remediation-topic"

    MFARemediationSNSTopic:
        Type: 'AWS::SNS::Topic'
        Properties:
            TopicName: !Sub "${AWS::AccountId}-mfa-remediation-topic"

    CustomRemediationEmailTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        TopicName: !Sub "${AWS::AccountId}-custom-remediation-topic"
        Subscription:
          - Endpoint: !Ref MyEmailAddress
            Protocol: email

    MFASNSInvokeLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref MFARemediationFunction
            Principal: sns.amazonaws.com
            SourceArn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AWS::AccountId}-mfa-remediation-topic"

    IAMSNSInvokeLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref IAMRemediationLambdaFunction
            Principal: sns.amazonaws.com
            SourceArn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AWS::AccountId}-iam-remediation-topic"
    
    RequiredTagsSNSInvokeLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
          Action: lambda:InvokeFunction
          FunctionName: !Ref RequiredTagsRemediationFunction
          Principal: sns.amazonaws.com
          SourceArn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AWS::AccountId}-required-tags-remediation-topic"

    IAMRemediationLambdaFunctionSubscription:
        Type: 'AWS::SNS::Subscription'
        Properties:
            Endpoint: !GetAtt RequiredTagsRemediationFunction.Arn
            Protocol: lambda
            TopicArn: !Ref RequiredTagsRemediationSNSTopic
        DependsOn:
            - RequiredTagsRemediationFunction

    IAMRemediationLambdaFunctionSubscription:
        Type: 'AWS::SNS::Subscription'
        Properties:
            Endpoint: !GetAtt IAMRemediationLambdaFunction.Arn
            Protocol: lambda
            TopicArn: !Ref IAMRemediationSNSTopic
        DependsOn:
            - IAMRemediationLambdaFunction

    MFARemediationLambdaFunctionSubscription:
        Type: 'AWS::SNS::Subscription'
        Properties:
            Endpoint: !GetAtt MFARemediationFunction.Arn
            Protocol: lambda
            TopicArn: !Ref MFARemediationSNSTopic
        DependsOn:
            - MFARemediationFunction

    TagsRemediationLambdaFunctionSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
          Endpoint: !GetAtt RequiredTagsRemediationFunction.Arn
          Protocol: lambda
          TopicArn: !Ref RequiredTagsRemediationSNSTopic
      DependsOn:
          - RequiredTagsRemediationFunction

    RequiredTagsRemediationFunction:
      Type: AWS::Lambda::Function
      Properties:
        Code:
          ZipFile: |
            const AWS = require("aws-sdk");
            const configService = new AWS.ConfigService();
            const s3 = new AWS.S3();
            const ec2 = new AWS.EC2();
            const rds = new AWS.RDS();
            const Tags = [ { Key: "CostCenter", Value: process.env.CostCenter }, { Key: "Workload", Value: process.env.Workload }, { Key: "Owner", Value: process.env.Owner } ];
            exports.handler = async event => {
              console.log("EVENT\n" + JSON.stringify(event, null, 2));
              const resourceId = event.Records.map(e => e.Sns.Message)[0];
              const resources = await getComplianceDetails();
              const resource = resources.filter(
                r =>
                  r.EvaluationResultIdentifier.EvaluationResultQualifier.ResourceId ===
                  resourceId
              )[0];
              const accountId = process.env.ACCOUNT_ID;
              const arn = getArnFromResourceId(
                resourceId,
                resource.EvaluationResultIdentifier.EvaluationResultQualifier.ResourceType,
                accountId
              );
              const tagResult = await addTags(arn, Tags);
              const debugInfo = getPrintInfo(arn, Tags, resource, tagResult);
              await sendEmail(debugInfo, resource);
              const response = {
                statusCode: 200,
                body: debugInfo
              };
              return response;
            };
            
            async function addTags(arn, Tags) {
              const result = "Required tags added to " + arn;
              if (arn.indexOf("s3") > -1) {
                await addS3Tags(arn, Tags);
              } else if (arn.indexOf("ec2") > -1) {
                await addEc2Tags(arn, Tags);
              } else if (arn.indexOf("rds") > -1) {
                await addRdsTags(arn, Tags);
              } else {
                result = "Auto tag implementation for ARN " + arn + " not implemented.";
              }
              return result;
            }
            
            async function addEc2Tags(arn, Tags) {
              const params = {
                Resources: [arn.split(":")[5]],
                Tags
              };
              return ec2.createTags(params).promise();
            }
            
            async function addRdsTags(arn, Tags) {
              const params = {
                ResourceName: arn,
                Tags
              };
              return rds.addTagsToResource(params).promise();
            }
            
            async function addS3Tags(Bucket, Tags) {
              const result = await s3.getBucketTagging({ Bucket }).promise();
              const TagSet = result.TagSet.concat(Tags);
              const params = {
                Bucket,
                Tagging: {
                  TagSet
                }
              };
              return s3.putBucketTagging(params).promise();
            }
            
            async function getComplianceDetails() {
              var params = {
                ConfigRuleName: process.env.CONFIG_RULE_NAME,
                ComplianceTypes: ["NON_COMPLIANT"],
                Limit: 100
              };
              const promise = await configService
                .getComplianceDetailsByConfigRule(params)
                .promise();
              return promise.EvaluationResults;
            }
            
            function getArnFromResourceId(resourceId, resourceType, accountId) {
              let region = process.env.AWS_REGION;
              let service = resourceType.split("::")[1].toLowerCase();
              let abbr = ":";
              if (
                resourceType === "AWS::S3::Bucket" ||
                resourceType.indexOf("AWS::IAM") > -1
              ) {
                region = "";
              }
              if (resourceType.indexOf("AWS::RDS::") > -1) {
                const subType = resourceType.split("::")[2];
                if (subType === "DBSubnetGroup") abbr += "subgrp:";
                if (subType === "DBSecurityGroup") abbr += "secgrp:";
                if (subType === "DBCluster") abbr += "cluster:";
              }
              if (resourceType === "AWS::S3::Bucket") {
                accountId = "";
              }
              let str = `arn:aws:${service}:${region}:${accountId}${abbr}${resourceId}`;
              console.log("Assembled ARN: ", str);
              return str;
            }
            
            function getPrintInfo(arn, tags, resource, result) {
              return `Resources in your account are missing required tags.
            
            Auto Remediation Result:\t ${result}
            Rule:\t ${
                resource.EvaluationResultIdentifier.EvaluationResultQualifier.ConfigRuleName
              }
            Resource Type:\t ${
                resource.EvaluationResultIdentifier.EvaluationResultQualifier.ResourceType
              }
            Arn:\t ${arn}
            Tags:\t ${JSON.stringify(tags)}
                `;
            }
            
            async function sendEmail(text, resource) {
              var params = {
                Subject:
                  "Resource missing required tags (" +
                  resource.EvaluationResultIdentifier.EvaluationResultQualifier
                    .ResourceType +
                  ")",
                Message: text,
                TopicArn: process.env.NOTIFICATION_TOPIC_ARN
              };
              const publishTextPromise = new AWS.SNS({ apiVersion: "2010-03-31" })
                .publish(params)
                .promise();
              return publishTextPromise;
            }
          
          
        Description: ARC319 Lambda Remediation for overly permissive IAM policies
        Handler: index.handler
        MemorySize: 128
        Environment:
          Variables:
            NOTIFICATION_TOPIC_ARN: !Ref CustomRemediationEmailTopic
            ACCOUNT_ID: !Sub "${AWS::AccountId}"
            CONFIG_RULE_NAME: !Sub "REQUIRED_TAGS_${AWS::StackName}"
            CostCenter: !Ref TagCostCenterValue
            Workload: !Ref TagWorkloadValue
            Owner: !Ref TagOwnerValue
        Role: !GetAtt RequiredTagsLambdaExecutionRole.Arn
        Runtime: nodejs8.10
        Timeout: 10

    IAMRemediationLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        Code:
          ZipFile: |
            const AWS = require('aws-sdk');
            const configService = new AWS.ConfigService();
            const sts = new AWS.STS();
            const iam = new AWS.IAM();


            exports.handler = async (event) => {
                console.log("EVENT\n" + JSON.stringify(event, null, 2));
                const resourceIds = event.Records.map(getRecordIdsFromSnsMessage);

                const configResults = await getDiscoveredIamResources(resourceIds);
                const policyName = getPolicyNameFromConfigResults(configResults);
                const accountId = await getAwsAccountNumber();
                const policyArn = `arn:aws:iam::${accountId}:policy/${policyName}`;
                console.log('Getting info for policy ' + policyArn);
                const policy = await getPolicy(policyArn);
                const attachedEntities = await getEntitiesAttachedToPolicy(policyArn);
                const debugInfo = getPrintInfo(policy, attachedEntities);
                await sendEmail(debugInfo);
                console.log('Emailing information: ', debugInfo);
                const response = {
                    statusCode: 200,
                    body: debugInfo
                };
                return response;
            };

            function getPrintInfo(policy, attachedEntities) {
                return `You're getting this notification because the policy listed below is in violation of AWS Config rule monitoring for improper IAM Admin permission usage.  Please review the details below under attached entities and remove admin permissions immediately.

            Name:\t ${policy.PolicyName}
            PolicyId:\t ${policy.PolicyId}
            Arn:\t ${policy.Arn}
            Description:\t ${policy.Description}
            CreateDate:\t ${policy.CreateDate}

            Attached Entity Details
            Attached PolicyGroups(${attachedEntities.PolicyGroups.length}): ${JSON.stringify(attachedEntities.PolicyGroups.map(i => i.GroupName))}
            Attached PolicyUsers(${attachedEntities.PolicyUsers.length}): ${JSON.stringify(attachedEntities.PolicyUsers.map(i => i.UserName))}
            Attached PolicyRoles(${attachedEntities.PolicyRoles.length}): ${JSON.stringify(attachedEntities.PolicyRoles.map(i => i.RoleName))}
                `;
            }

            async function sendEmail(text) {
                var params = {
                    Subject: process.env.EMAIL_SUBJECT,
                  Message: text,
                  TopicArn: process.env.NOTIFICATION_TOPIC_ARN
                };

                // Create promise and SNS service object
                const publishTextPromise = new AWS.SNS({apiVersion: '2010-03-31'}).publish(params).promise();
                return publishTextPromise;
            }

            async function getPolicy(arn) {
                const params = {
                  PolicyArn: arn
                };
                const data = await iam.getPolicy(params).promise();
                console.log("Policy Data\n" + JSON.stringify(data, null, 2));
                return data.Policy;
            }

            async function getEntitiesAttachedToPolicy(arn) {
                const params = {
                  PolicyArn: arn
                };
                const data = await iam.listEntitiesForPolicy(params).promise();
                console.log("Entity Atttachment Data\n" + JSON.stringify(data, null, 2));
                return data;
            }

            async function getAwsAccountNumber() {
                const data = await sts.getCallerIdentity({}).promise();
                console.log('Account information: ', data);
                return data.Account;
            }

            function getPolicyNameFromConfigResults(results) {
                return results.resourceIdentifiers[0].resourceName;
            }

            async function getDiscoveredIamResources(resourceIds) {
                const params = {
                  resourceType: 'AWS::IAM::Policy',
                  includeDeletedResources: false,
                  resourceIds: resourceIds
                };
                console.log('Requesting these resource Ids from Config: ', resourceIds);
                return await configService.listDiscoveredResources(params).promise();
            }

            function getRecordIdsFromSnsMessage(record) {
                return record.Sns.Message;
            }

        Description: ARC319 Lambda Remediation for overly permissive IAM policies
        Handler: index.handler
        MemorySize: 128
        Environment:
          Variables:
            NOTIFICATION_TOPIC_ARN: !Ref CustomRemediationEmailTopic
            EMAIL_SUBJECT: "IAM Security Violations found for NO IAM ADMIN Config Rule"
        Role: !GetAtt IAMLambdaExecutionRole.Arn
        Runtime: nodejs8.10
        Timeout: 3

    MFARemediationFunction:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                ZipFile: |
                    const AWS = require('aws-sdk');
                    const configService = new AWS.ConfigService();
                    const iam = new AWS.IAM();

                    exports.handler = async (event) => {
                        console.log("EVENT\n" + JSON.stringify(event, null, 2));
                        const resourceIds = event.Records.map(getRecordIdsFromSnsMessage);

                        const configResults = await getDiscoveredIamResources(resourceIds);
                        const userName = getUserNameFromConfigResults(configResults);
                        const groupNamesAttached = await getGroupNamesAttachedToUser(userName);
                        console.log('removing following groups ', groupNamesAttached);
                        const removed = await removeUserFromGroups(userName, groupNamesAttached);
                        const debugInfo = getPrintInfo(userName, groupNamesAttached);
                        await sendEmail(debugInfo);
                        console.log('Emailing information: ', debugInfo);
                        const response = {
                            statusCode: 200,
                            body: debugInfo
                        };
                        return response;
                    };

                    function getPrintInfo(userName, groupNames) {
                        return `You're getting this notification because the user listed below is in violation of AWS Config rule monitoring for users without MFA enabled.  All access has been revoked.  Please add MFA and restore groups.  Groups removed are listed below for reference.

                    User:\t ${userName}

                    Attached Groups(${groupNames.length}): ${groupNames.join(', ')}
                        `;
                    }

                    async function sendEmail(text) {
                        var params = {
                            Subject: process.env.EMAIL_SUBJECT,
                            Message: text,
                            TopicArn: process.env.NOTIFICATION_TOPIC_ARN
                        };

                        const publishTextPromise = new AWS.SNS({apiVersion: '2010-03-31'}).publish(params).promise();
                        return publishTextPromise;
                    }

                    async function getGroupNamesAttachedToUser(userName) {
                        const params = {
                        UserName: userName
                        };
                        const result = await iam.listGroupsForUser(params).promise();
                        console.log(result);
                        return result.Groups.map(g => g.GroupName);
                    }

                    async function removeUserFromGroups(userName, groupNames) {
                        const promises = await groupNames.map(async name => {
                            var params = {
                            GroupName: name,
                            UserName: userName
                            };
                            return await iam.removeUserFromGroup(params).promise();
                        });

                        return Promise.all(promises);
                    }

                    function getUserNameFromConfigResults(results) {
                        return results.resourceIdentifiers[0].resourceName;
                    }

                    async function getDiscoveredIamResources(resourceIds) {
                        const params = {
                        resourceType: 'AWS::IAM::User',
                        includeDeletedResources: false,
                        resourceIds: resourceIds
                        };
                        console.log('Requesting these resource Ids from Config: ', resourceIds);
                        return await configService.listDiscoveredResources(params).promise();
                    }

                    function getRecordIdsFromSnsMessage(record) {
                        return record.Sns.Message;
                    }

            Description: ARC319 Lambda Remediation for overly IAM users with missing MFA
            Handler: index.handler
            MemorySize: 128
            Environment:
                Variables:
                    NOTIFICATION_TOPIC_ARN: !Ref CustomRemediationEmailTopic
                    EMAIL_SUBJECT: "IAM Security Violations found for IAM USERS WITHOUT MFA"
            Role: !GetAtt MFALambdaExecutionRole.Arn
            Runtime: nodejs8.10
            Timeout: 3

    AWSConfigRule1:
      Type: AWS::Config::ConfigRule
      Properties:
        Description: 'Checks whether Amazon Elastic Compute Cloud (Amazon EC2) instances have a public IP association. The rule is NON_COMPLIANT if the publicIp field is present in the Amazon EC2 instance configuration item. This rule applies only to IPv4.'
        ConfigRuleName: !Sub "EC2_INSTANCE_NO_PUBLIC_IP_${AWS::StackName}"
        Scope:
          ComplianceResourceTypes:
            - 'AWS::EC2::Instance'
        Source:
          Owner: AWS
          SourceIdentifier: EC2_INSTANCE_NO_PUBLIC_IP
    AWSConfigRule2:
      Type: AWS::Config::ConfigRule
      Properties:
        Description: 'Checks that your Amazon S3 buckets do not allow public read access. The rule checks the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).'
        ConfigRuleName: !Sub "S3_BUCKET_PUBLIC_READ_PROHIBITED_${AWS::StackName}"
        MaximumExecutionFrequency: One_Hour
        Scope:
          ComplianceResourceTypes:
            - 'AWS::S3::Bucket'
        Source:
          Owner: AWS
          SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED
    AWSConfigRule3:
      Type: AWS::Config::ConfigRule
      Properties:
        Description: 'Checks whether the Amazon Relational Database Service (RDS) instances are not publicly accessible. The rule is non-compliant if the publiclyAccessible field is true in the instance configuration item.'
        ConfigRuleName: !Sub "RDS_INSTANCE_PUBLIC_ACCESS_CHECK_${AWS::StackName}"
        Scope:
          ComplianceResourceTypes:
            - 'AWS::RDS::DBInstance'
        Source:
          Owner: AWS
          SourceIdentifier: RDS_INSTANCE_PUBLIC_ACCESS_CHECK
    AWSConfigRule4:
      Type: AWS::Config::ConfigRule
      Properties:
        Description: 'Checks whether the default version of AWS Identity and Access Management (IAM) policies do not have administrator access. If any statement has \"Effect\": \"Allow\" with \"Action\": \"*\" over \"Resource\": \"*\", the rule is non-compliant.'
        ConfigRuleName: !Sub "IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS_${AWS::StackName}"
        Scope:
          ComplianceResourceTypes:
            - 'AWS::IAM::Policy'
        Source:
          Owner: AWS
          SourceIdentifier: IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS
    AWSConfigRule5:
      Type: AWS::Config::ConfigRule
      Properties:
        Description: 'Checks whether security groups that are in use disallow unrestricted incoming SSH traffic.'
        ConfigRuleName: !Sub "INCOMING_SSH_DISABLED_${AWS::StackName}"
        Scope:
          ComplianceResourceTypes:
            - 'AWS::EC2::SecurityGroup'
        Source:
          Owner: AWS
          SourceIdentifier: INCOMING_SSH_DISABLED
    AWSConfigRule6:
      Type: AWS::Config::ConfigRule
      Properties:
        Description: 'Checks whether your resources have the tags that you specify.'
        InputParameters:
          tag1Key: CostCenter
          tag1Value: !Ref TagCostCenterValue
          tag2Key: Workload
          tag2Value: !Ref TagWorkloadValue
          tag3Key: Owner
          tag3Value: !Ref TagOwnerValue
        ConfigRuleName: !Sub "REQUIRED_TAGS_${AWS::StackName}"
        Scope:
          ComplianceResourceTypes:
            - 'AWS::EC2::Instance'
            - 'AWS::RDS::DBCluster'
            - 'AWS::EC2::SecurityGroup'
        Source:
          Owner: AWS
          SourceIdentifier: REQUIRED_TAGS
    AWSConfigRule7:
      Type: AWS::Config::ConfigRule
      Properties:
        Description: 'Checks whether your IAM users have multi factor authentication turned on'
        ConfigRuleName: !Sub "IAM_USER_MFA_ENABLED_${AWS::StackName}"
        Scope:
          ComplianceResourceTypes:
            - 'AWS::IAM::User'
        Source:
          Owner: AWS
          SourceIdentifier: IAM_USER_MFA_ENABLED
    AutoRemediationRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
                  - events.amazonaws.com
                  - ssm.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole'
        Policies:
          - PolicyName: ConfigRemediation319
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Sid: AllowRemediation
                  Effect: Allow
                  Action:
                    - 's3:PutBucketPublicAccessBlock'
                    - 'S3:PutEncryptionConfiguration'
                    - 'ec2:StopInstances'
                    - 'rds:ModifyDBInstance'
                    - 'ec2:RevokeSecurityGroupIngress'
                    - 'iam:PutRolePolicy'
                    - 'sns:Publish'
                  Resource: '*'
    RemediationPassRolePolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyName: ConfigRemediation
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'iam:PassRole'
              Resource:
                'Fn::GetAtt':
                  - AutoRemediationRole
                  - Arn
        Roles:
          - Ref: AutoRemediationRole
    ConfigRule1Remediation:
        Type: 'AWS::Config::RemediationConfiguration'
        Properties:
          Automatic: 'true'
          MaximumAutomaticAttempts: '5'
          RetryAttemptSeconds: '60'
          ConfigRuleName: !Sub "EC2_INSTANCE_NO_PUBLIC_IP_${AWS::StackName}"
          Parameters:
              AutomationAssumeRole:
                  StaticValue:
                    Values:
                      - Fn::GetAtt: AutoRemediationRole.Arn
              InstanceId:
                  ResourceValue:
                    Value: 'RESOURCE_ID'
          TargetId: 'AWS-StopEC2Instance'
          TargetType: 'SSM_DOCUMENT'
          TargetVersion: '1'
    ConfigRule2Remediation:
        Type: 'AWS::Config::RemediationConfiguration'
        Properties:
          Automatic: 'true'
          MaximumAutomaticAttempts: '5'
          RetryAttemptSeconds: '60'
          ConfigRuleName: !Sub "S3_BUCKET_PUBLIC_READ_PROHIBITED_${AWS::StackName}"
          Parameters:
              AutomationAssumeRole:
                  StaticValue:
                    Values:
                      - Fn::GetAtt: AutoRemediationRole.Arn
              S3BucketName:
                  ResourceValue:
                    Value: 'RESOURCE_ID'
          TargetId: 'AWS-DisableS3BucketPublicReadWrite'
          TargetType: 'SSM_DOCUMENT'
          TargetVersion: '1'

    ConfigRule4Remediation:
        Type: 'AWS::Config::RemediationConfiguration'
        Properties:
          Automatic: 'true'
          MaximumAutomaticAttempts: '5'
          RetryAttemptSeconds: '60'
          ConfigRuleName: !Sub "IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS_${AWS::StackName}"
          Parameters:
              AutomationAssumeRole:
                  StaticValue:
                    Values:
                      - Fn::GetAtt: AutoRemediationRole.Arn
              Message:
                  ResourceValue:
                    Value: 'RESOURCE_ID'
              TopicArn:
                  StaticValue:
                    Values:
                      - Ref: IAMRemediationSNSTopic
          TargetId: 'AWS-PublishSNSNotification'
          TargetType: 'SSM_DOCUMENT'
          TargetVersion: '1'
    ConfigRule7Remediation:
        Type: 'AWS::Config::RemediationConfiguration'
        Properties:
          Automatic: 'true'
          MaximumAutomaticAttempts: '5'
          RetryAttemptSeconds: '60'
          ConfigRuleName: !Sub "IAM_USER_MFA_ENABLED_${AWS::StackName}"
          Parameters:
              AutomationAssumeRole:
                  StaticValue:
                    Values:
                      - Fn::GetAtt: AutoRemediationRole.Arn
              Message:
                  ResourceValue:
                    Value: 'RESOURCE_ID'
              TopicArn:
                  StaticValue:
                    Values:
                      - Ref: MFARemediationSNSTopic
          TargetId: 'AWS-PublishSNSNotification'
          TargetType: 'SSM_DOCUMENT'
          TargetVersion: '1'
    ConfigRule6Remediation:
      Type: 'AWS::Config::RemediationConfiguration'
      Properties:
        Automatic: 'true'
        MaximumAutomaticAttempts: '5'
        RetryAttemptSeconds: '60'
        ConfigRuleName: !Sub "REQUIRED_TAGS_${AWS::StackName}"
        Parameters:
            AutomationAssumeRole:
                StaticValue:
                  Values:
                    - Fn::GetAtt: AutoRemediationRole.Arn
            Message:
                ResourceValue:
                  Value: 'RESOURCE_ID'
            TopicArn:
                StaticValue:
                  Values:
                    - Ref: RequiredTagsRemediationSNSTopic
        TargetId: 'AWS-PublishSNSNotification'
        TargetType: 'SSM_DOCUMENT'
        TargetVersion: '1'
Outputs:
  IAMRoleArn:
    Description: IAM Role used for automated Remediation
    Value: !GetAtt AutoRemediationRole.Arn
