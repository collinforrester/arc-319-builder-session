Parameters:
    MyIPAddress:
      Type: String
      Default: 'Enter Current IP'
      MinLength: 1
      ConstraintDescription: 'IP address of current workstation to allow for ingress SSH access'
    MyEmailAddress:
      Type: String
      Default: 'Enter Valid Email address'
      MinLength: 1
      ConstraintDescription: 'Email address used for findings notification'
    TagCostCenterValue:
      Type: String
      Default: '900124-984'
      MinLength: 1
      ConstraintDescription: 'Required value.  Separate multiple values with comas.'
    TagWorkloadValue:
      Type: String
      Default: 'WordPress'
      MinLength: 1
      ConstraintDescription: 'Required value.  Separate multiple values with comas.'
    TagOwnerValue:
      Type: String
      Default: 'Brad Pitt'
      MinLength: 1
      ConstraintDescription: 'Required value.  Separate multiple values with comas.'
Resources:
    IAMLambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          -
            PolicyName: "AllowSNSPublish"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action: "sns:Publish"
                  Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AWS::AccountId}-custom-remediation-topic"
          -
            PolicyName: "AllowConfigList"
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                - Effect: "Allow"
                  Action: "config:ListDiscoveredResources"
                  Resource: "*"
    
    IAMRemediationSNSTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        TopicName: !Sub "${AWS::AccountId}-iam-remediation-topic"
    
    CustomRemediationEmailTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        TopicName: !Sub "${AWS::AccountId}-custom-remediation-topic"
        Subscription:
          - Endpoint: !Ref MyEmailAddress
            Protocol: email
    
    IAMSNSInvokeLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref IAMRemediationLambdaFunction
            Principal: sns.amazonaws.com
            SourceArn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AWS::AccountId}-iam-remediation-topic"
    
    IAMRemediationLambdaFunctionSubscription:
        Type: 'AWS::SNS::Subscription'
        Properties:
            Endpoint: !GetAtt IAMRemediationLambdaFunction.Arn
            Protocol: lambda
            TopicArn: !Ref IAMRemediationSNSTopic
        DependsOn:
            - IAMRemediationLambdaFunction      
    IAMRemediationLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        Code:
          ZipFile: |
            const AWS = require('aws-sdk');
            const configService = new AWS.ConfigService();
            const sts = new AWS.STS();
            const iam = new AWS.IAM();
            
            
            exports.handler = async (event) => {
                console.log("EVENT\n" + JSON.stringify(event, null, 2));
                const resourceIds = event.Records.map(getRecordIdsFromSnsMessage);
                
                const configResults = await getDiscoveredIamResources(resourceIds);
                const policyName = getPolicyNameFromConfigResults(configResults);
                const accountId = await getAwsAccountNumber();
                const policyArn = `arn:aws:iam::${accountId}:policy/${policyName}`;
                console.log('Getting info for policy ' + policyArn);
                const policy = await getPolicy(policyArn);
                const attachedEntities = await getEntitiesAttachedToPolicy(policyArn);
                const debugInfo = getPrintInfo(policy, attachedEntities);
                await sendEmail(debugInfo);
                console.log('Emailing information: ', debugInfo);
                const response = {
                    statusCode: 200,
                    body: debugInfo
                };
                return response;
            };
            
            function getPrintInfo(policy, attachedEntities) {
                return `You're getting this notification because the policy listed below is in violation of AWS Config rule monitoring for in proper IAM Admin permission usage.  Please review the details below under attached entities and remove admin permissions immediately.
            
            Name:\t ${policy.PolicyName}
            PolicyId:\t ${policy.PolicyId}
            Arn:\t ${policy.Arn}
            Description:\t ${policy.Description}
            CreateDate:\t ${policy.CreateDate}
            
            Attached Entity Details
            Attached PolicyGroups(${attachedEntities.PolicyGroups.length}): ${JSON.stringify(attachedEntities.PolicyGroups.map(i => i.GroupName))}
            Attached PolicyUsers(${attachedEntities.PolicyUsers.length}): ${JSON.stringify(attachedEntities.PolicyUsers.map(i => i.UserName))}
            Attached PolicyRoles(${attachedEntities.PolicyRoles.length}): ${JSON.stringify(attachedEntities.PolicyRoles.map(i => i.RoleName))}
                `;
            }
            
            async function sendEmail(text) {
                var params = {
                    Subject: process.env.EMAIL_SUBJECT,
                  Message: text,
                  TopicArn: process.env.NOTIFICATION_TOPIC_ARN
                };
                
                // Create promise and SNS service object
                const publishTextPromise = new AWS.SNS({apiVersion: '2010-03-31'}).publish(params).promise();
                return publishTextPromise;
            }
            
            async function getPolicy(arn) {
                const params = {
                  PolicyArn: arn
                };
                const data = await iam.getPolicy(params).promise();
                console.log("Policy Data\n" + JSON.stringify(data, null, 2));
                return data.Policy;
            }
            
            async function getEntitiesAttachedToPolicy(arn) {
                const params = {
                  PolicyArn: arn
                };
                const data = await iam.listEntitiesForPolicy(params).promise();
                console.log("Entity Atttachment Data\n" + JSON.stringify(data, null, 2));
                return data;
            }
            
            async function getAwsAccountNumber() {
                const data = await sts.getCallerIdentity({}).promise();
                console.log('Account information: ', data);
                return data.Account;
            }
            
            function getPolicyNameFromConfigResults(results) {
                return results.resourceIdentifiers[0].resourceName;
            }
            
            async function getDiscoveredIamResources(resourceIds) {
                const params = {
                  resourceType: 'AWS::IAM::Policy',
                  includeDeletedResources: false,
                  resourceIds: resourceIds
                };
                console.log('Requesting these resource Ids from Config: ', resourceIds); 
                return await configService.listDiscoveredResources(params).promise();
            }
            
            function getRecordIdsFromSnsMessage(record) {
                return record.Sns.Message;
            }
                
        Description: ARC319 Lambda Remediation for overly permissive IAM policies
        Handler: index.handler
        MemorySize: 128
        Environment:
          Variables:
            NOTIFICATION_TOPIC_ARN: !Ref CustomRemediationEmailTopic
            EMAIL_SUBJECT: "IAM Security Violations found for NO IAM ADMIN Config Rule"
        Role: !GetAtt IAMLambdaExecutionRole.Arn
        Runtime: nodejs8.10
        Timeout: 3


    AWSConfigRule1:
      Type: AWS::Config::ConfigRule
      Properties:
        Description: 'Checks whether Amazon Elastic Compute Cloud (Amazon EC2) instances have a public IP association. The rule is NON_COMPLIANT if the publicIp field is present in the Amazon EC2 instance configuration item. This rule applies only to IPv4.'
        ConfigRuleName: EC2_INSTANCE_NO_PUBLIC_IP
        Scope:
          ComplianceResourceTypes:
            - 'AWS::EC2::Instance'
        Source:
          Owner: AWS
          SourceIdentifier: EC2_INSTANCE_NO_PUBLIC_IP
    AWSConfigRule2:
      Type: AWS::Config::ConfigRule
      Properties:
        Description: 'Checks that your Amazon S3 buckets do not allow public read access. The rule checks the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).'
        ConfigRuleName: S3_BUCKET_PUBLIC_READ_PROHIBITED
        MaximumExecutionFrequency: One_Hour
        Scope:
          ComplianceResourceTypes:
            - 'AWS::S3::Bucket'
        Source:
          Owner: AWS
          SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED
    AWSConfigRule3:
      Type: AWS::Config::ConfigRule
      Properties:
        Description: 'Checks whether the Amazon Relational Database Service (RDS) instances are not publicly accessible. The rule is non-compliant if the publiclyAccessible field is true in the instance configuration item.'
        ConfigRuleName: RDS_INSTANCE_PUBLIC_ACCESS_CHECK
        Scope:
          ComplianceResourceTypes:
            - 'AWS::RDS::DBInstance'
        Source:
          Owner: AWS
          SourceIdentifier: RDS_INSTANCE_PUBLIC_ACCESS_CHECK
    AWSConfigRule4:
      Type: AWS::Config::ConfigRule
      Properties:
        Description: 'Checks whether the default version of AWS Identity and Access Management (IAM) policies do not have administrator access. If any statement has \"Effect\": \"Allow\" with \"Action\": \"*\" over \"Resource\": \"*\", the rule is non-compliant.'
        ConfigRuleName: IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS
        Scope:
          ComplianceResourceTypes:
            - 'AWS::IAM::Policy'
        Source:
          Owner: AWS
          SourceIdentifier: IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS
    AWSConfigRule5:
      Type: AWS::Config::ConfigRule
      Properties:
        Description: 'Checks whether security groups that are in use disallow unrestricted incoming SSH traffic.'
        ConfigRuleName: INCOMING_SSH_DISABLED
        Scope:
          ComplianceResourceTypes:
            - 'AWS::EC2::SecurityGroup'
        Source:
          Owner: AWS
          SourceIdentifier: INCOMING_SSH_DISABLED
    AWSConfigRule6:
      Type: AWS::Config::ConfigRule
      Properties:
        Description: 'Checks whether your resources have the tags that you specify.'
        InputParameters:
          tag1Key: CostCenter
          tag1Value: !Ref TagCostCenterValue
          tag2Key: Workload
          tag2Value: !Ref TagWorkloadValue
          tag3Key: Owner
          tag3Value: !Ref TagOwnerValue
        ConfigRuleName: REQUIRED_TAGS
        Scope:
          ComplianceResourceTypes:
            - 'AWS::EC2::Instance'
            - 'AWS::RDS::DBInstance'
            - 'AWS::EC2::SecurityGroup'
        Source:
          Owner: AWS
          SourceIdentifier: REQUIRED_TAGS
    AutoRemediationRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
                  - events.amazonaws.com
                  - ssm.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole'
        Policies:
          - PolicyName: ConfigRemediation319
            PolicyDocument:
              Version: '2012-10-17'
              Statement: #/This section needs to be refined add other resources, least priv
                - Sid: AllowRemediation
                  Effect: Allow
                  Action:
                    - 's3:PutBucketPublicAccessBlock'
                    - 'S3:PutEncryptionConfiguration'
                    - 'ec2:DisassociateAddress'
                    - 'rds:ModifyDBInstance'
                    - 'ec2:RevokeSecurityGroupIngress'
                    - 'iam:PutRolePolicy'
                  Resource: '*'
    RemediationPassRolePolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyName: ConfigRemediation
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'iam:PassRole'
              Resource:
                'Fn::GetAtt':
                  - AutoRemediationRole
                  - Arn
        Roles:
          - Ref: AutoRemediationRole
    ConfigRule1Remediation:
        Type: 'AWS::Config::RemediationConfiguration'
        Properties:
          Automatic: 'true'
          MaximumAutomaticAttempts: '5'
          RetryAttemptSeconds: '60'
          ConfigRuleName: EC2_INSTANCE_NO_PUBLIC_IP
          Parameters:
              AutomationAssumeRole:
                  StaticValue:
                    Values:
                      - Fn::GetAtt: AutoRemediationRole.Arn
              AllocationId:
                  ResourceValue:
                    Value: 'RESOURCE_ID'
          TargetId: 'AWS-ReleaseElasticIP'
          TargetType: 'SSM_DOCUMENT'
          TargetVersion: '1'
    ConfigRule2Remediation:
        Type: 'AWS::Config::RemediationConfiguration'
        Properties:
          Automatic: 'true'
          MaximumAutomaticAttempts: '5'
          RetryAttemptSeconds: '60'
          ConfigRuleName: S3_BUCKET_PUBLIC_READ_PROHIBITED
          Parameters:
              AutomationAssumeRole:
                  StaticValue:
                    Values:
                      - Fn::GetAtt: AutoRemediationRole.Arn
              S3BucketName:
                  ResourceValue:
                    Value: 'RESOURCE_ID'
          TargetId: 'AWS-DisableS3BucketPublicReadWrite'
          TargetType: 'SSM_DOCUMENT'
          TargetVersion: '1'
    ConfigRule3Remediation:
        Type: 'AWS::Config::RemediationConfiguration'
        Properties:
          Automatic: 'true'
          MaximumAutomaticAttempts: '5'
          RetryAttemptSeconds: '60'
          ConfigRuleName: RDS_INSTANCE_PUBLIC_ACCESS_CHECK
          Parameters:
              AutomationAssumeRole:
                  StaticValue:
                    Values:
                      - Fn::GetAtt: AutoRemediationRole.Arn
              InstanceId:
                  ResourceValue:
                    Value: 'RESOURCE_ID'
          TargetId: 'AWS-StopRdsInstance'
          TargetType: 'SSM_DOCUMENT'
          TargetVersion: '1'
    
Outputs:
  IAMRoleArn:
    Description: IAM Role used for automated Remediation
    Value: !GetAtt AutoRemediationRole.Arn
