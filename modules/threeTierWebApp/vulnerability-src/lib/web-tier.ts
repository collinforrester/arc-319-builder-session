import cdk = require('@aws-cdk/core');
import ec2 = require('@aws-cdk/aws-ec2');
// import autoscaling = require('@aws-cdk/aws-autoscaling');
import elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');
import { SrcStackVulnerabilityOptions } from './src-stack';

export interface WebTierConstructProps {
  vpc?: ec2.Vpc,
  vulnerabilityOptions?: SrcStackVulnerabilityOptions
}

export class WebTierConstruct extends cdk.Construct {
  /** @returns the ID of the VPC */
  public readonly vpcId: string;

  constructor(scope: cdk.Construct, id: string, props: WebTierConstructProps = {}) {
    super(scope, id);

    const vpc = props.vpc || new ec2.Vpc(this, 'VPC');

    const sg = new ec2.SecurityGroup(this, 'openSg', {
      allowAllOutbound: true,
      description: 'Open to the world',
      securityGroupName: 'sgOpenToTheWorld',
      vpc
    });
    sg.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.allTraffic());
    sg.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.allTraffic());

    // TODO
    // 1. ec2 AMI with hello world on it?
    // 2. Unpatched/out of date AMI
    // 3. IAM role that has s3 full access, RDS full access, IAM full access

    // const asg = new autoscaling.AutoScalingGroup(this, 'ASG', {
    //   vpc,
    //   instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.MICRO),
    //   machineImage: new ec2.AmazonLinuxImage(),
    // });

    const lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {
      vpc,
      internetFacing: true
    });

    const listener = lb.addListener('Listener', {
      port: 80,
    });

    listener.addTargets('Target', {
      port: 80,
      targets: []
      // targets: [asg]
    });

    listener.connections.allowDefaultPortFromAnyIpv4('Open to the world');

    // asg.scaleOnRequestCount('AModestLoad', {
    //   targetRequestsPerSecond: 1
    // });

    this.vpcId = vpc.vpcId;
  }
}