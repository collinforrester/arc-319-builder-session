import cdk = require('@aws-cdk/core');
import ec2 = require('@aws-cdk/aws-ec2');
import iam = require('@aws-cdk/aws-iam');
import autoscaling = require('@aws-cdk/aws-autoscaling');
import elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');
import { SrcStackVulnerabilityOptions } from './src-stack';
import { Aws } from '@aws-cdk/core';

export interface WebTierConstructProps {
  vpc?: ec2.Vpc,
  vulnerabilityOptions?: SrcStackVulnerabilityOptions
}

export class WebTierConstruct extends cdk.Construct {
  /** @returns the ID of the VPC */
  public readonly vpcId: string;

  constructor(scope: cdk.Construct, id: string, props: WebTierConstructProps = {}) {
    super(scope, id);

    const vpc = props.vpc || new ec2.Vpc(this, 'VPC');
    // unrestricted security group!
    const sg = new ec2.SecurityGroup(this, 'openSg', {
      allowAllOutbound: true,
      description: 'Open to the world',
      securityGroupName: 'sgOpenToTheWorld',
      vpc
    });
    sg.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.allTraffic());
    sg.addIngressRule(ec2.Peer.anyIpv6(), ec2.Port.allTraffic());

    const role = new iam.LazyRole(this, 'OverlyPermissiveEc2Role', {
      roleName: `${Aws.STACK_NAME}-MyEc2Role`,
      assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com')
    });
    // overly permissive IAM role given to EC2!
    const policy = new iam.ManagedPolicy(this, 'ManagedAdminPolicy');
    policy.addStatements(new iam.PolicyStatement({
      effect: iam.Effect.ALLOW,
      resources: ['*'],
      actions: ['*']
    }));
    policy.attachToRole(role);
    const userData = ec2.UserData.forLinux();
    userData.addCommands(...[
      'sudo yum update -y',
      'sudo yum install -y ec2-instance-connect'
    ]);
    const asg = new autoscaling.AutoScalingGroup(this, 'ASG', {
      vpc,
      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.MICRO),
      machineImage: new ec2.AmazonLinuxImage(),
      role,
      associatePublicIpAddress: true,
      vpcSubnets: {
        subnetType: ec2.SubnetType.PUBLIC
      },
      userData
    });
    asg.addSecurityGroup(sg);

    const lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {
      vpc,
      internetFacing: true
    });

    const listener = lb.addListener(`Listener`, {
      port: 80,
    });

    listener.addTargets('Target', {
      port: 80,
      targets: [asg]
    });

    // open to the world LB!
    listener.connections.allowDefaultPortFromAnyIpv4('Open to the world');

    // IAM user for console usage
    const user = new iam.User(this, 'ConsoleUser', {
      userName: 'ConsoleUser'
    });

    asg.scaleOnRequestCount('AModestLoad', {
      targetRequestsPerSecond: 1
    });

    this.vpcId = vpc.vpcId;
  }
}