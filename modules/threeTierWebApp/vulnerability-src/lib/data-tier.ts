import cdk = require('@aws-cdk/core');
import ec2 = require('@aws-cdk/aws-ec2');
import rds = require('@aws-cdk/aws-rds');
import { SrcStackVulnerabilityOptions } from './src-stack';
import { RemovalPolicy } from '@aws-cdk/core';

export interface DataTierConstructProps {
  vpc?: ec2.Vpc,
  vulnerabilityOptions?: SrcStackVulnerabilityOptions
}

export class DataTierConstruct extends cdk.Construct {
  /** @returns the ID of the VPC */
  public readonly vpcId: string;

  constructor(scope: cdk.Construct, id: string, props: DataTierConstructProps = {}) {
    super(scope, id);

    const vpc = props.vpc || new ec2.Vpc(this, 'VPC');
    const dbCluster = new rds.DatabaseCluster(this, "MyDatabase", {
      engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,
      engineVersion: "10.7",
      masterUser: {
        username: "master"
      },
      defaultDatabaseName: "main",
      instanceProps: {
        instanceType: new ec2.InstanceType("r5.large"),
        vpcSubnets: {
          subnetType: ec2.SubnetType.PUBLIC,
        },
        vpc
      },
      storageEncrypted: false,
      parameterGroup: {
        parameterGroupName: "default.aurora-postgresql10",
      } as any,
      removalPolicy: RemovalPolicy.DESTROY
    });
    // new rds.DatabaseCluster(this, "MyRdsDb", {

    //   defaultDatabaseName: "MyAuroraDatabase",
    //   masterUser: {
    //     username: "admin"
    //   },
    //   engine: rds.DatabaseClusterEngine.AURORA_MYSQL,
    //   instanceProps: {
    //     instanceType: new ec2.InstanceType(
    //       `${ec2.InstanceClass.R5}.${ec2.InstanceSize.LARGE}`
    //     ),
    //     vpc: vpc,
    //     vpcSubnets: {
    //       subnetType: ec2.SubnetType.PUBLIC
    //     }
    //   },
    //   parameterGroup: new rds.ParameterGroup(this, 'myDbParamGroup', {
    //     family: 'aurora-mysql5.7',
    //     description: 'My Aurora DB Param Group',
    //     parameters: {}
    //   }),
    // });

    // public security groups!
    const sg = new ec2.SecurityGroup(this, 'openDbSg', {
      allowAllOutbound: true,
      description: 'My Db is open to the world',
      securityGroupName: 'sgDbOpenToTheWorld',
      vpc
    });
    sg.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.allTraffic());
    sg.addIngressRule(ec2.Peer.anyIpv6(), ec2.Port.allTraffic());

    // TODO
    // will serverless aurora rds ever work in cdk?
    // new rds.CfnDBCluster(this, "myServerlessDb", {
    //   engine: rds.DatabaseClusterEngine.AURORA.name,
    //   engineMode: 'serverless',
    //   vpcSecurityGroupIds: [sg.securityGroupId],
    //   scalingConfiguration: {
    //     autoPause: true,
    //     minCapacity: 1,
    //     maxCapacity: 2
    //   },
    //   masterUsername: 'admin',
    //   masterUserPassword: 'Password123!'
    // });
    dbCluster.connections.addSecurityGroup(sg);
    this.vpcId = vpc.vpcId;
    
  }
}