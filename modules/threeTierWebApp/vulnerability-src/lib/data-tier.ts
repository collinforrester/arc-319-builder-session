import cdk = require('@aws-cdk/core');
import ec2 = require('@aws-cdk/aws-ec2');
import rds = require('@aws-cdk/aws-rds');
import { SrcStackVulnerabilityOptions } from './src-stack';
import { RemovalPolicy } from '@aws-cdk/core';

export interface DataTierConstructProps {
  vpc?: ec2.Vpc,
  vulnerabilityOptions?: SrcStackVulnerabilityOptions
}

export class DataTierConstruct extends cdk.Construct {
  /** @returns the ID of the VPC */
  public readonly vpcId: string;

  constructor(scope: cdk.Construct, id: string, props: DataTierConstructProps = {}) {
    super(scope, id);

    const vpc = props.vpc || new ec2.Vpc(this, 'VPC');

    // public security groups!
    const sg = new ec2.SecurityGroup(this, 'openDbSg', {
      allowAllOutbound: true,
      description: 'My Db is open to the world',
      securityGroupName: 'sgDbOpenToTheWorld',
      vpc
    });
    sg.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.allTraffic());
    sg.addIngressRule(ec2.Peer.anyIpv6(), ec2.Port.allTraffic());

    const serverlessCluster = new rds.CfnDBCluster(this, 'MyDb', {
      dbClusterIdentifier: 'mydbid'+vpc.vpcId,
      databaseName: 'masterdb',
      engine: 'aurora-postgresql',
      engineMode: 'serverless',
      port: 5432,
      engineVersion: '10.7',
      masterUsername: 'postgres',
      masterUserPassword: 'postgres',
      dbSubnetGroupName: new rds.CfnDBSubnetGroup(this, "db-subnet-group", {
        dbSubnetGroupDescription: `database cluster subnet group`,
        subnetIds: vpc.selectSubnets().subnetIds
      }).ref,
      scalingConfiguration: {
        minCapacity: 8
      },
      vpcSecurityGroupIds: [sg.securityGroupId]
    });

    // old and busted
    // const dbCluster = new rds.DatabaseCluster(this, "MyDatabase", {
    //   engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,
    //   engineVersion: "10.7",
    //   masterUser: {
    //     username: "master"
    //   },
    //   defaultDatabaseName: "main",
    //   instanceProps: {
    //     instanceType: new ec2.InstanceType("r5.large"),
    //     vpcSubnets: {
    //       subnetType: ec2.SubnetType.PUBLIC,
    //     },
    //     vpc
    //   },
    //   storageEncrypted: false,
    //   parameterGroup: {
    //     parameterGroupName: "default.aurora-postgresql10",
    //   } as any,
    //   removalPolicy: RemovalPolicy.DESTROY
    // });

    // dbCluster.connections.addSecurityGroup(sg);
    this.vpcId = vpc.vpcId;
    
  }
}