import cdk = require('@aws-cdk/core');
import { CdkPublicS3BucketConstruct } from '../lib/public-s3-bucket';
import { WebTierConstruct } from '../lib/web-tier';
import { DataTierConstruct } from '../lib/data-tier';
import ec2 = require('@aws-cdk/aws-ec2');
import { Tag } from '@aws-cdk/core';

export interface SrcStackVulnerabilityOptions {
  s3?: boolean,
  iam?: boolean,
  ec2?: boolean,
  rds?: boolean
}

export interface SrcStackProps extends cdk.StackProps {
  vulnerabilityOptions?: SrcStackVulnerabilityOptions
}

export class SrcStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props: SrcStackProps = {
    vulnerabilityOptions: {
      s3: true,
      ec2: true,
      rds: true
    }
  }) {
    super(scope, id, props);
    
    const vpc = new ec2.Vpc(this, 'VPC');
    if(props.vulnerabilityOptions && props.vulnerabilityOptions.s3) {
      new CdkPublicS3BucketConstruct(this, 'PublicS3Bucket');
    }

    if(props.vulnerabilityOptions && props.vulnerabilityOptions.ec2) {
      const webTier = new WebTierConstruct(this, 'WebTier', { vpc, vulnerabilityOptions: props.vulnerabilityOptions });
    }

    if(props.vulnerabilityOptions && props.vulnerabilityOptions.rds) {
      const dataTier = new DataTierConstruct(this, 'DataTier', { vpc, vulnerabilityOptions: props.vulnerabilityOptions });
    }
    Tag.add(this, 'CreatedFor', 'ARC319');
  }
}
